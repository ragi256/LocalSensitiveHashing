
index
1.概要
2.大まかな流れ
3.具体例

[==================== 概要 ====================]
大量のツイートデータから、内容の似ているツイート(パクリツイート)を高速に検出します。
高速化にLocal Sensitive Hashingアルゴリズム(LSH)を用いています。
検出に用いるプログラムは以下の4つです(実行順)
 - setData
 - convertStream
 - searchID
 - calculateDistance
compareTestProgram, spreadCompareTestProgram, systemAssesmentはLSHを用いなかった通常プログラムとの比較テスト用のプログラムです。
sparead版はツイートデータが増えてcompareTestProgramでは処理し切れなくなった時のために処理を分散させたバージョンです。ただし、単にループを100分割しているだけなので、分散処理を行なっているわけではありません。

[=============== 大まかな流れ =================]
入力データとしてMeCabで形態素解析を行ったツイートデータを利用します。
各プログラムごとに経過確認のためログデータを出力します。
次の処理には直前の処理で出力したログデータを入力とします。

(setData)
単語ごとに分割されたツイートの中から自動詞である単語の原形を拾います。
この際、ツイートをベクトル、単語を各要素とみなして正規化を行い各次元の値を計算します。
入力:MeCabによって形態素解析をしたツイートデータ
出力:ツイートID, 正規化した値, 単語リスト 

(convertStream)
LSHにより各ツイートの正規化した値と単語リストからツイートをビットストリームに変換します。
この際パラメータとしてbit数を入力します。
bit数が大きければ精度は上がりますが、その分処理が低速になります。
入力:ツイートID, 正規化した値, 単語リスト
出力:ツイートID，ビットストリーム(2進数)

(searchID)
ビット化されたツイートを解析し、ビットストリームが似ているツイートIDを抽出します。
この際パラメータとして何回近似比較を行うか、抽出するIDの近似幅をどれくらいとるかをパラメータとして入力します。
入力:ツイートID, ビットストリーム
出力:ツイートID, 似ているIDのリスト

(calculateDistance)
searchIDによって絞りこまれたツイートが似ているIDのリストを用いて実際の近似度を計算します。
計算の結果近似度が一定以上であった場合標準出力に表示します。
入力:ツイートID, 似ているIDのリスト
出力:ツイートID1 ツイートID2 ID1とID2の近似度

[=================== 具体例 ===================]
以下は1ツイートごとの処理入力・出力例です。
各プログラムは進捗状況を表示するため標準エラー出力をします。

(setData)
$./setData input output
input:
BOD	000000000000000	111111111	twitter_account_ID 20xx-12-31 00:00 @ツイート文内容はここにきます
* 0 1D 0/1 1.324307
@       記号,一般,*,*,*,*,@,@,@,,       O
* 1 2D 0/1 0.000000
ツイート  名詞,一般,*,*,*,*,ツイート,ツイート,ツイート,,        O
文      名詞,一般,*,*,*,*,文,ブン,ブン,,       O
内容    名詞,一般,*,*,*,*,内容,ナイヨウ,ナイヨー,,      O
は      助詞,係助詞,*,*,*,*,は,ハ,ワ,,  O
ここ    名詞,代名詞,一般,*,*,*,ここ,ココ,ココ,, O
に      助詞,格助詞,一般,*,*,*,に,ニ,ニ,,       O
き      動詞,非自立,*,*,カ変・クル,連用形,くる,キ,キ,,  O
ます    助動詞,*,*,*,特殊・マス,連用形,ます,マス,マス,, O
EOS
EOD

output:
00000000000000000
0.447213595499958
ツイート 文 内容 ここ くる

(convertStream)
$./convertStream input output
input:
00000000000000000
0.447213595499958
ツイート 文 内容 ここ くる

output:(16bitの場合)
00000000000000000	1101100111011001
11111111111111111	0010011000100110
22222222222222222	0010111000100110

(searchID)
$./searchID input output
input:
00000000000000000	1101100111011001
11111111111111111	0010011000100110
22222222222222222	0010111000100110

output:(2回評価、幅3の場合)
10000 //全ツイート数
00000000000000000

10000000000000001
20000000000000002
30000000000000003
40000000000000004
50000000000000005
60000000000000006
70000000000000007
80000000000000008
90000000000000009
01000000000000010
11000000000000011
21000000000000012

(calculateDistance)
$./calculateDistance input
input:
10000 
00000000000000000

10000000000000001
20000000000000002
30000000000000003
40000000000000004
50000000000000005
60000000000000006
70000000000000007
80000000000000008
90000000000000009
01000000000000010
11000000000000011
21000000000000012

output:(標準出力)
00000000000000000	30000000000000003
00000000000000000	60000000000000006
00000000000000000	90000000000000009
00000000000000000	21000000000000012
